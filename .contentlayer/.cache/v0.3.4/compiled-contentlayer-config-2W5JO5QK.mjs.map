{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer/source-files'\r\n\r\n\r\nconst root = process.cwd()\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\n\r\nconst computedFields: ComputedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc: { _raw: { flattenedPath: any } }) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc: { _raw: { flattenedPath: string } }) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n  path: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath,\r\n  },\r\n  filePath: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.sourceFilePath,\r\n  },\r\n}\r\n\r\n\r\nexport const Page = defineDocumentType(() => ({\r\n  name: \"Page\",\r\n  filePathPattern: `pages/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `posts/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true, },    \r\n    date: { type: \"string\", },\r\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\r\n    description: { type: \"string\", },\r\n    image: { type: \"string\", },    \r\n    author: { type: \"string\", },\r\n    author_image: { type: \"string\", },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Post, Page],\r\n})\r\n"],
  "mappings": ";AAAA,SAAS,oBAAoC,kBAAkB;AAG/D,IAAM,OAAO,QAAQ,IAAI;AACzB,IAAM,eAAe,QAAQ,IAAI,aAAa;AAE9C,IAAM,iBAAiC;AAAA,EACrC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAA0C,IAAI,IAAI,KAAK,aAAa;AAAA,EAChF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAA6C,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EAC5G;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AACF;AAGO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAM;AAAA,IACzC,MAAM,EAAE,MAAM,SAAU;AAAA,IACxB,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,SAAS,CAAC,EAAE;AAAA,IAC1D,aAAa,EAAE,MAAM,SAAU;AAAA,IAC/B,OAAO,EAAE,MAAM,SAAU;AAAA,IACzB,QAAQ,EAAE,MAAM,SAAU;AAAA,IAC1B,cAAc,EAAE,MAAM,SAAU;AAAA,EAClC;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,IAAI;AAC5B,CAAC;",
  "names": []
}
